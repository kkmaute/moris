#
#Copyright( c ) 2022 University of Colorado
#Licensed under the MIT license.See LICENSE.txt file in the MORIS root for details.
#
#-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- --
#

namespace moris
{

    /** @defgroup XTKGhost Face Oriented Ghost Stabilization

    @section Theory
    \anchor GH1
    \image html  ghost.png "Figure 1: All penalized facets for each material domain"

    \anchor GH2
    \image html  ghost_close.png "Figure 2: Integration over penalized facet"

    Inherent to  unfitted finite element methods  is the presence of basis functions with very small influence on discretized solution of the partial differential equation. This results in ill-conditioning of the nonlinear and linearized system especially near weakly imposed Dirichlet boundary conditions. The motivation behind face oriented ghost stabilization is to mitigate this ill-conditioning by extending the coercivity from the physical domain to the mesh domain \citep{Burman2010}. Face oriented ghost stabilization has been formulated to penalize jumps in the state and state gradients in \citep{Burman2015} :

    \f[
    \mathit{R}_{Ghost} = \gamma_g \sum_{F \in \mathit{F}_{cut}} \sum_{j=1}^k h_K^{2(j-1)+1} \int_F [[  D^{j} v_i ]] [[ D^{j} u_i  ]] ds
    \label{eq:ghost_disp}
    \f]
    where \f$\gamma_g\f$ is a ghost penalty parameter, \f$F\f$ is a facet, \f$\mathit{F}_{cut}\f$ is the set of penalized facets, $h_K$ is the cell length, \f$k\f$ is the degree of interpolation, \f$[[ \xi ]] = \xi_1 - \xi_2\f$ is a jump operator and \f$D^{j}\f$ is the derivative operator.  \f$\gamma_g\f$ is usually set to a value between 0.001 and 0.05.In some cases discontinuities in the state and state gradients are present by construction, for this case the principle of virtual work has been used to formulate a face oriented ghost stabilization, see Equation \eqref{eq:ghost_pvw} \citep{Geiss2018}. One component of face oriented ghost penalization is development of methods to select the candidate facets for penalization and grouping them appropriately into facet sets.

    \f[
    \mathit{R}_{Ghost} =  \gamma_g  \sum_{F \in \mathit{F}_{cut}} \sum_{j=1}^k h_K^{2(j-1)+1} \int_F [[  D^{j-1} \epsilon_{im} ]] [[  D^{j-1} \sigma_{im}]] ds
    \f]

    An example of a multiple component domain is shown in Figure \ref GH1 "1". \f$\Omega\f$ consists of three distinct components, blue, green and grey. The set of facets \f$F_{cut}\f$ for penalization is constructed between interpolation cells belonging to the same component. \f$F_{cut}\f$ is a double sided side set as defined in the Mesh section. Integration is always performed over the entirety of the facet \f$F\f$ rather than just the portion in the physical domain. Since the facets are defined on a component, the state defined on \f$\Omega_1\f$ does not interact with the state defined on \f$\Omega_2\f$ in \f$R_{Ghost}\f$. In Figure \ref GH2 "2", a single penalized facet F is shown, a penalized facet consists of a pair of integration domains, one leader facet and one follower facet.  Ghost stabilization shown in \eqref{eq:ghost_pvw}, been shown to improve conditioning of the system while not significantly influencing the solution in \citep{Geiss2018}.

    @section XTKGhostImplementation Implementation
    The highest level function in the ghost stabilization strategy is called setup_ghost_stabilization(). This function is called through the XTK Model function construct_face_oriented_ghost_penalization_cells(). Alternatively, it is triggered from the XTK perform() function depending on whether the parameter "ghost_stab" is turned on.  The algorithm consists of the following parts:
     -# Identify and setup aura vertices for ghost stabilization.
     -# Declare ghost double side sets in the mesh.
     -# Construct ghost double side set in the mesh.

     Where a mesh refers to a combination of an integration and interpolation mesh as defined in  \ref MTK_Overview "MTK".

    Vertices in the aura are not guaranteed to have T-matrices (TODO:LINK TO T_MATRIX DISCUSSION WHEN IT EXISTS) because thy are not needed in the forward analysis for general IWGs. The ghost algorithm constructs double sided facets on processor boundaries which require the  T-matrix for aura vertices that appear in a processors partition of the ghost side sets to integrate in the forward analysis. The ghost stabilization routine resolves this issue by identifying the vertices with an incomplete t-matrix and are attached to ghost facets in the XTK model. The T-matrix information of these vertices is requested from the owning processor resulting in all vertices that appear in the XTK model having the appropriate T-matrix. This communication results in additional basis functions appearing on a partition and may result in communication with additional processors depending on a basis function's owning processor.

    Next, the double side sets are declared in the mesh. There is one double sided side set for each bulk-phase in the model. This portion of the algorithm assures that the mesh has allocated the space for the double side set and given a name to the sets. The set information does not get populated in this step.

    The final step of the algorithm populates the double side sets that were declared in the previous step. This routine iterates through the neighbor of each sub-phase in the mesh, \ref XTKBpSpSpNeigh "sub-phase neighborhood". If a neighborhood relationship between sub-phases meets this \ref XTKGhostRules "criteria", then a double sided cluster is construted between the sub-phases. This double sided cluster is placed in the mesh set corresponding to its bulk-phase.

    @subsection XTKGhostRules Determining who constructs a ghost facet
    \anchor GH3
    \image html  ghost_rules.png "Figure 3: Ghost construction configurations."

    There are a couple rules used to that decide whether or not a ghost facet needs to be constructed between sub-phases.  These are developed with distrubuted hierachically refined models in mind and are as follows:
     -# Ghost facets are constructed between clusters of the same bulk-phase only
     -# Ghost facets are only created between sub-phases where at least one is intersected by the geometry.
     -# Ghost facets are constructed by the processor that owns the sub-phase that is determined to be the leader side.
     -# When sub-phases are on different levels, ghost facets are constructed with the sub-phase on the coarse level as the leader side and  the sub-phase on the fine level as the follower side.
     -# When sub-phases are on the same level, ghost facets are constructed with the sub-phase with the higher id as the leader side and the sub-phase with the lower id as the follower side.


     The first rule is enforced during the construction of the  sub-phase neighborhood by not creating a neighborhood relationship between sub-phases with different bulk-phases. For this reason there is no case in the function create_ghost in cl_XTK_Ghost_Stabilization.cpp. In Figure \ref GH3 "3", the various cases which may appear in a distributed hiearchically refined model are shown. The cell on the left is owned by processor 0 and the cell colored grey is owned by processor 1. Higher and lower indicates which sub-phase has a higher id. The star indicates the processor responsible for constructing the ghost facet. If rule 1 is removed and ghost facets are constructed between all neighboring sub-phases of the same bulk-phase, a discontinuous Galerkin type double sided side set is created. For definitions of sub-phases and bulk-phases see the section titled \ref XTKBpSpSpNeigh " Sub-phase and Sub-phase Neighborhood".

     @subsection XTKGhostParallel Parallel Considerations
     The ghost stabilization uses the standard \ref XTKParallel "XTK parallelism" to communicate aura vertex t-matrices. This communication occurs with the call to identify_and_setup_aura_vertices_in_ghost(). The anchor points used to make the information parallel consistent are the background vertex id and a subphase id that the background vertex is attached to. This enable the owning processor of an aura vertex to determine the correct enriched interpolation vertex to select and return for the T-matrix. The reason enriched interpolation vertex ids are not used as the anchor is because enriched interpolation vertices do not have parallel consistent ids.

     @subsection XTKGhostSpecialCluster Transition Double Side Cluster
     \anchor GH4
     \image html  ghost_transition.png "Figure 4: Ghost double sided transition cluster."

     When a double sided ghost facet is constructed between sub-phases which are on different refinement levels in the background interpolation mesh, a transition cluster is created. The 2D version is shown in Figure \ref GH4 "4" and the 3D version is analagous to it. The follower side is always a trivial cluster meaning that the integration and interpolation domains are coincident. This is the case because even for intersected sub-phases, the ghost facet is constructed along the length of the entire interpolation cell the sub-phase belongs to. In the case of a transition cluster, the leader side is non-trivial and contains the sub-phase on the coarser level. The reason it is non-trivial is because the ghost facet is constructed over the entire shared facet of the finer (smaller) interpolation cell which corresponds to a portion of the coarser interpolation cell facet. The local coordinates used in this cluster are looked up using the shared side ordinal between the two interpolation cells and the quadrant that the finer interpolation cell occupies on that facet. These have been tabulated for all cases in 2- and 3- spatial dimensions. These clusters are constructed in create_leader_side_cluster() of cl_XTK_Ghost_Stabilization.hpp with the cases for the lookup table being located in get_local_coords_on_transition_side().

     */
}
