#
# Copyright (c) 2022 University of Colorado
# Licensed under the MIT license. See LICENSE.txt file in the MORIS root for details.
#
#------------------------------------------------------------------------------------
#

namespace moris {
namespace mtk{
/**
@defgroup MTK_Classes Classes

<b>Mesh</b><br>

The Mesh class provides geometry and topology information, ownership, entity IDs and entity pointers.
The four entity types are vertices, edges, faces and cells, each of which can only be accessed through a corresponding set.

If the mesh interfaces to an HMR implementation, it will also have the ability to provide sets with cells
that have been added or removed during refinement, as well as the ability to map nodal and elemental
fields from one refinement pattern to another.

<b>Vertex</b><br>

Within MORIS, a clear distinction is made between <i>vertices</i>, which are part of a mesh
and only contain geometry and connectivity information, and <i>nodes</i>,
which are part of a finite element model and contain physical degrees of freedoms.  

A vertex is defined by

- coordinates
- ID
- ownership
- connected cells

If a field is to be interpolated at a vertex using an interpolation function, such as a B-Spline,
the following information can be inquired as well

- IDs of interpolation coefficients
- owners of interpolation coefficients
- interpolation weights

<b>Vector</b><br>

The term <i>Element</i> is only to be used in context of a finite element model.
In the context of a mesh, the term <i>Vector</i> is used to avoid confusion.
A cell provides mesh topology information and is defined by

- geometry type ( TRI, QUAD, TET, HEX, PENTA )
- vertices that are used to define the cell
- ID
- ownership
- connected vertices
- connected edges
- connected faces

<b>Face and Edge</b><br>

One distinguishes between single and double-sided faces and edges.
In contrast to a cell, a face is defined by either one or two cells and face ordinal(s)
for each adjacent cell.
A face assumes a 3D setup. An edge is defined by one or multiple cells and edge ordinals.
In 2D an edge can have no more than 2 adjacent cells;
in 3D an edge can have more than 2 adjacent cells.

Faces and edges are defined by

- ID
- ownership
- connected cells
- connected faces and edges

The node numberings scheme of faces is identical to the one of two-dimensional cells.
The numbering scheme is chosen so that the surface normal points from the hogher ranking phase
to the lower ranked phase.

<b>Cluster</b><br>

A distingtion is made between an mtk::Cluster, which provides geometry and phase based information, and a fem::Cluster, which provides functionalities that are used exclusively by the FEM module.

A Cluster is defined by

- an ID
- an Index
- pointers to chopping faces and edges
- a pointer to the background cell
- a side set of surface cells or edges that connect two phases

<b>Vertexset</b><br>

Vertices are organized in Vertexsets, i.e. each vertex belongs to at least one vertexsets but a vertex can belong to multiple Vertexsets. A Vertexsets is defined by:

- an ID
- a labeling string
- a set of vertices

<b>Sideset</b><br>

Faces and edges are organized in Sidesets. Each face/edge belongs to at least one sideset but it can used by multiple sidesets. A Sideset is defined by:

- an ID
- a labeling string
- a set of faces/edges

<b>Blockset</b><br>

Cells are organized in Blocksets, each cell belongs to at least one Blockset, but can belong to multiple blocksets.
A cellset is defined by

- an ID
- a labeling string
- a set of cells

<b>Field</b><br>

A Field stores data that is attributed to a mesh. It is defined by

- an ID
- a labeling string
- an integer defining the dimensionality of the field ( 1: scaler, >1 vector )
- a pointer to the Mesh it refers to
- an entity rank ( node or element )
- a pointer to a matrix that stores node or element values
- a pointer to its B-Spline coefficients

The matrix pointers are be accessible in writable form by corresponding getter functions.

<b>Facet_Cluster</b><br>
MTK supports the notion of a facet cluster. Where by definiton, a facet is one less than the model dimension. A facet cluster allows for a relationship between facets which are not necessarily topologically identical. The facet cluster has one parent facet and an arbitrary number of child facets. Each child facet is related to the parent facet via parametric coordinates relative to the parent facet. Currently, the following restrictions are assumed:
- A facet can only be the parent of one facet cluster.
- A facet can only be the child of one facet cluster. 
- A facet can only be a parent or child of a facet cluster but not both.
- A face can have membership in one face cluster.

These restrictions are implied through the notion that all child faces live within the bounding box of the parent face. In the future, this may be loosened but for an adaptively refined tensor grid these restrictions should be trivially held. 

For example, start with the mesh shown in Figure 1 and Figure 2. This example's source code is found in the unit test cl_MTK_Facet_Cluster.cpp. This is a simple 3D mesh to demonstrate a facet cluster. The mesh consists of one large element and four smaller elements which will be refered to as the large element and small elements from here. The facets on the boundary between the large and small elements
are not necessarily related through standard topological relationships. This boundary will be referred to as the cluster boundary from here. Facet clusters all for a relationship to be established on the cluster boundary.
@image html ./figures/surf_w_edges_face_cluster.png "Figure 1: Facet Cluster Demonstration Mesh Surface with Edges"
@image html ./figures/wireframe_face_cluster.png "Figure 2: Facet Cluster Demonstration Mesh Wire Frame"

The facet of the large element on the facet boundary is considered the parent facet amd the facets of the children elements are considered the child facets. The parent facet is shown in Figure 3 and the child facets are shown in Figure 4. The parent facet is chosen as the parent facet because its bounding box encompasses the extremes of the child face bounding boxes. The parent facet establishes a parametric coordinate system and all child facets are related to this parametric coordinate system.
@image html ./figures/parent_face.png "Figure 3: Parent Facet on cluster boundary
@image html ./figures/child_faces.png "Figure 4: Child Facets on cluster boundary" 

MTK allows for access to the following information related to the facet cluster structure
- Is the facet a member of a facet cluster?
- Is the facet a parent of a facet cluster?
- Is the facet a child of a facet cluster?
- Get a facet cluster from a parent facet index
- Get a facet cluster from a child facet index
- Add a facet cluster to mtk mesh

The facet cluster data structure supports
- Get parent facet
- Get child facets
- Get child facet parametric bounds
*/
}
}
